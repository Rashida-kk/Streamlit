# -*- coding: utf-8 -*-
"""stockdata.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qkua4QvjQdXnPOsJygOI_QBePrL78N4w
"""

import streamlit as st
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objs as go

# Set up Streamlit
st.title("Stock Market Dashboard")
st.sidebar.header("Configuration")

# Stock Symbol Input
stock_symbol = st.sidebar.text_input("Enter Stock Symbol", value="AAPL", max_chars=5)

# Date range selection
start_date = st.sidebar.date_input("Start Date", value=pd.to_datetime("2019-01-01"))
end_date = st.sidebar.date_input("End Date", value=pd.to_datetime("2024-01-01"))

# Fetch data from Yahoo Finance
st.write(f"Fetching data for {stock_symbol} from Yahoo Finance...")
stock_data = yf.Ticker(stock_symbol)
df = stock_data.history(start=start_date, end=end_date)

# Check if data is fetched
if df.empty:
    st.error("No data found. Please enter a valid stock symbol.")
else:
    # Show raw data
    st.subheader("Raw Data")
    st.write(df)

    # Downloadable CSV
    st.download_button(
        label="Download CSV",
        data=df.to_csv().encode("utf-8"),
        file_name=f"{stock_symbol}_data.csv",
        mime="text/csv"
    )

    # Plot the stock's close price history
    st.subheader("Stock Close Price History")
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df.index, y=df['Close'], mode='lines', name="Close Price"))
    fig.update_layout(title="Closing Price Over Time", xaxis_title="Date", yaxis_title="Close Price (USD)")
    st.plotly_chart(fig)

    # Moving Averages
    st.subheader("Moving Averages")
    df['MA_50'] = df['Close'].rolling(50).mean()
    df['MA_200'] = df['Close'].rolling(200).mean()

    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df.index, y=df['Close'], mode='lines', name="Close Price"))
    fig.add_trace(go.Scatter(x=df.index, y=df['MA_50'], mode='lines', name="50-day MA"))
    fig.add_trace(go.Scatter(x=df.index, y=df['MA_200'], mode='lines', name="200-day MA"))
    fig.update_layout(title="Stock Price with 50-day and 200-day Moving Averages", xaxis_title="Date", yaxis_title="Price (USD)")
    st.plotly_chart(fig)

    # Comparative Analysis (if you want to compare multiple stocks)
    st.sidebar.subheader("Comparative Analysis")
    compare_symbol = st.sidebar.text_input("Enter another Stock Symbol to Compare", value="MSFT", max_chars=5)
    if compare_symbol:
        compare_data = yf.Ticker(compare_symbol)
        df_compare = compare_data.history(start=start_date, end=end_date)

        # Comparative plot
        st.subheader("Comparative Analysis with Another Stock")
        fig_compare = go.Figure()
        fig_compare.add_trace(go.Scatter(x=df.index, y=df['Close'], mode='lines', name=f"{stock_symbol} Close Price"))
        fig_compare.add_trace(go.Scatter(x=df_compare.index, y=df_compare['Close'], mode='lines', name=f"{compare_symbol} Close Price"))
        fig_compare.update_layout(title=f"{stock_symbol} vs {compare_symbol} Close Price", xaxis_title="Date", yaxis_title="Price (USD)")
        st.plotly_chart(fig_compare)

    # Optional Sentiment Analysis Placeholder (can be implemented if API is available)
    st.subheader("Sentiment Analysis (Optional)")
    st.write("Sentiment analysis can be added here if you integrate a social media or news API.")

    # Interactive Filtering by Volume
    st.sidebar.subheader("Interactive Filtering")
    min_volume = st.sidebar.slider("Minimum Trading Volume", int(df['Volume'].min()), int(df['Volume'].max()), int(df['Volume'].min()))
    filtered_df = df[df['Volume'] >= min_volume]

    st.subheader("Filtered Data by Trading Volume")
    st.write(filtered_df)